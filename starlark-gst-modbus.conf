[[processors.starlark]]

source = '''
def apply(metric):
    # Split each field value into multiple values by splitting on every 2nd digit
    split_fields = {}
    for k, v in metric.fields.items():
        split_fields[k] = split_field(v)

    # Create new metric with each split field value
    new_fields = {}
    for k, split_values in split_fields.items():
        for i, split_value in enumerate(split_values):
            new_field_name = "{}_{}_{}".format(k, i*2, (i*2)+1)
            new_fields[new_field_name] = split_value

    return Metric(metric.name, tags=metric.tags, fields=new_fields)

def split_field(value):
    # Convert value to 16-bit binary string
    binary_value = int_to_bin(value)

    # Split binary value into multiple values by splitting on every 2nd digit
    split_values = [int(binary_value[i:i+2], 2) for i in range(0, len(binary_value), 2)]

    return split_values

def int_to_bin(num):
    if num == 0:
        return '0000000000000000'
    binary = ''
    while num > 0:
        binary = str(num % 2) + binary
        num = num // 2
    padding_length = 16 - len(binary)
    padding = '0' * padding_length
    binary = padding + binary
    return binary
'''
